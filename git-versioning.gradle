def versioningExecuteCommand = { cmd ->
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    try {
        exec {
            commandLine cmd
            standardOutput = stdout
            errorOutput = stderr
        }
        return stdout.toString().trim().replaceAll("\"", "")
    } catch (ignored) {
        println(ignored.toString())
        return ""
    }
}

ext {
    versioning = [
            lastTag : versioningExecuteCommand(['git', 'for-each-ref', '--format="%(refname:short)"', '--sort=-authordate', '--count=1', 'refs/tags']).toString(),
            branch  : versioningExecuteCommand(['git', 'rev-parse', '--abbrev-ref', 'HEAD']),
            describe: versioningExecuteCommand(['git', 'describe', '--tags']),
            commit  : versioningExecuteCommand(['git', 'rev-parse', '--short', 'HEAD']),
            commitsCount: versioningExecuteCommand(['git', 'rev-list','--all', '--count']).toInteger()
    ]
    versioning.describeBranched = "$versioning.describe-$versioning.branch"
}

task versioningPrintVersion() {
    println("Last Tag: $versioning.lastTag")
    println("Branch: $versioning.branch")
    println("Describe: $versioning.describe")
    println("Commit: $versioning.commit")
    println("Branched: $versioning.describeBranched")
    println("Commits count: $versioning.commitsCount")
}